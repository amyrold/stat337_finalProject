# R version
R.version.string # "R version 4.0.2 (2020-06-22)"
source("~/Documents/Folder/01 School/01 LUC/03 Junior/02 Spring/stats/stat337_finalProject/1.main.R", echo=TRUE)
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
#individual level l.series with dorsal spines (mds), pelvic score (ips), and touching pterygiophores (ptt)
#These data are what were analyzed in Bell et al. 2006 and Hunt et al. 2008.
data.raw <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""), header = TRUE, stringsAsFactors = FALSE)
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
#individual level l.series with dorsal spines (mds), pelvic score (ips), and touching pterygiophores (ptt)
#These data are what were analyzed in Bell et al. 2006 and Hunt et al. 2008.
data.raw <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""), stringsAsFactors = FALSE)
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
#individual level l.series with dorsal spines (mds), pelvic score (ips), and touching pterygiophores (ptt)
#These data are what were analyzed in Bell et al. 2006 and Hunt et al. 2008.
data.raw <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""))
data.raw <- read.csv('stmf.csv')
data.raw <- read.csv('a.data.raw/stmf.csv')
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
#individual level l.series with dorsal spines (mds), pelvic score (ips), and touching pterygiophores (ptt)
#These data are what were analyzed in Bell et al. 2006 and Hunt et al. 2008.
data.raw <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""), header = TRUE, stringsAsFactors = FALSE, sep='\t')
head(data.raw)
str(data.raw)
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
#individual level l.series with dorsal spines (mds), pelvic score (ips), and touching pterygiophores (ptt)
#These data are what were analyzed in Bell et al. 2006 and Hunt et al. 2008.
data.raw <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""), header = TRUE, stringsAsFactors = FALSE, sep=' ')
head(data.raw)
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
#individual level l.series with dorsal spines (mds), pelvic score (ips), and touching pterygiophores (ptt)
#These data are what were analyzed in Bell et al. 2006 and Hunt et al. 2008.
data.raw <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""), header = TRUE, stringsAsFactors = FALSE)
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
#individual level l.series with dorsal spines (mds), pelvic score (ips), and touching pterygiophores (ptt)
#These data are what were analyzed in Bell et al. 2006 and Hunt et al. 2008.
data.raw <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""), header = TRUE, stringsAsFactors = FALSE)
head(data.raw)
data.rank <- read.csv(paste(p.data.raw, 'ranking.csv', spe=''),header = TRUE, stringsAsFactors = FALSE)
data.rank <- read.csv(paste(p.data.raw, 'ranking.csv', sep=''),header = TRUE, stringsAsFactors = FALSE)
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
data.death <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""), header = TRUE, stringsAsFactors = FALSE)
# * 1.2 Housekeeping ----
c.code <- unique(data.death$CountryCode)
c.code
c.list <- unique(data.rank$country)
c.list
c.used <- c('Australia','Austria','Belarus','Belgium','Bulgaria','Canada','Chile',
'Croatia','Czechia','Denmark','Estonia','Finland','France','Germany',
'Greece','Hong Kong','Hungary','Iceland','Ireland','Israel','Italy',
'Japan','Latvia','Lithuania','Luxembourg','Netherlands','New Zealand',
'Norway','Poland','Portugal','Republic of Korea','Russia','Slovakia',
'Slovenia','Spain','Sweden','Switzerland','Taiwan','U.K.','U.S.A','Ukraine')
count(c.used)
length(c.used)
length(c.code)
c.code
str(data.death)
c.names <- read.csv(paste(p.data.raw, 'country_names.csv',sep=''),header = TRUE, stringsAsFactors = FALSE)
str(data.death)
# 1. Import Data and Housekeeping ----
# * 1.1 Import Data ----
data.death <- read.csv(paste(p.data.raw, "stmf.csv", sep = ""), header = TRUE, stringsAsFactors = FALSE)
str(data.death)
# Libraries ----
install.packages('factoestra')
library(factoextra)
# Libraries ----
install.packages('factoextra')
library(factoextra)
library(ggplot2)
library(factoextra)
#Remove missing values
obesity <- obesity[complete.cases(obesity), ]
obesity <- read.csv('a.data.raw/ObesityDataSet_raw_and_data_sinthetic.csv')
#Remove missing values
obesity <- obesity[complete.cases(obesity), ]
#Convert categorical to numerical values and convert to dataframe
obesity.num <- data.matrix(obesity)
obesity.num <- data.frame(obesity.num)
###############################################################################
# k-means clustering
kmeans(obesity.num, centers, iter.max = 10, nstart = 1)
###############################################################################
# k-means clustering
kmeans(obesity.num, 3, iter.max = 10, nstart = 1)
###############################################################################
# k-means clustering
kmeans(obesity.num, centers = 3, nstart = 20)
str(obesity.num)
str(iris_1)
install.packages('cluster')
library(cluster)
obesity.scaled <- scale(obesity.num)
fviz_nbclust(obesity.scaled, kmeans, method = 'wss')
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(obesity.scaled,
FUN = kmeans,
nstart = 25,
K.max = 10,
B = 50)
#plot number of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
kmeans.os <- kmeans(obesity.scaled, centers = 9, nstart = 20)
#plot results of final k-means model
fviz_cluster(kmeans.os, data = obesity.scaled)
kmeans.os <- kmeans(obesity.scaled, centers = 4, nstart = 20)
#plot results of final k-means model
fviz_cluster(kmeans.os, data = obesity.scaled)
#select desired traits
obesity.select <- obesity.num[-c('TUE','CALC', 'Gender', 'Smoke')]
#select desired traits
obesity.select <- obesity.num[,-c('TUE','CALC', 'Gender', 'Smoke')]
str(obesity.num)
#select desired traits
obesity.select <- obesity.num[,c(1,10,14,15)]
#select desired traits
obesity.select <- obesity.num[,-c(1,10,14,15)]
obesity.select
obesity.scaled <- scale(obesity.num)
fviz_nbclust(obesity.scaled, kmeans, method = 'wss') #elbow at 9 clusters
#calculate gap statistic based on number of clusters
gap_stat <- clusGap(obesity.scaled,
FUN = kmeans,
nstart = 25,
K.max = 10,
B = 50)
#perform kmeans clustering
kmeans.os <- kmeans(obesity.scaled, centers = 9, nstart = 20)
#plot results of final k-means model
fviz_cluster(kmeans.os, data = obesity.scaled)
kmeans.os
#perform kmeans clustering
kmeans.os <- kmeans(obesity.scaled, centers = 4, nstart = 20)
#plot results of final k-means model
fviz_cluster(kmeans.os, data = obesity.scaled)
###############################################################################
# k-means clustering
obesity <- read.csv('a.data.raw/ObesityDataSet_raw_and_data_sinthetic.csv')
#Remove missing values
obesity <- obesity[complete.cases(obesity), ]
#Convert categorical to numerical values and convert to dataframe
obesity.num <- data.matrix(obesity)
obesity.num <- data.frame(obesity.num)
#select desired traits
obesity.select <- obesity.num[,-c(1,10,14,15)]
obesity.scaled <- scale(obesity.num)
obesity.scaled
###############################################################################
# k-means clustering
obesity <- read.csv('a.data.raw/ObesityDataSet_raw_and_data_sinthetic.csv')
#Remove missing values
obesity <- obesity[complete.cases(obesity), ]
#Convert categorical to numerical values and convert to dataframe
obesity.num <- data.matrix(obesity)
obesity.num <- data.frame(obesity.num)
#select desired traits
obesity.select <- obesity.num[,-c(1,10,14,15)]
fviz_nbclust(obesity.scaled, kmeans, method = 'wss') #elbow at 9 clusters
#perform kmeans clustering
kmeans.os <- kmeans(obesity.select, centers = 4, nstart = 20)
#plot results of final k-means model
fviz_cluster(kmeans.os, data = obesity.scaled)
###############################################################################
# k-means clustering
obesity <- read.csv('a.data.raw/ObesityDataSet_raw_and_data_sinthetic.csv')
#Remove missing values
obesity <- obesity[complete.cases(obesity), ]
#Convert categorical to numerical values and convert to dataframe
obesity.num <- data.matrix(obesity)
obesity.num <- data.frame(obesity.num)
#select desired traits
obesity.select <- obesity.num[,-c(1,10,14,15)]
obesity.scaled <- scale(obesity.num)
fviz_nbclust(obesity.scaled, kmeans, method = 'wss') #elbow at 9 clusters
#perform kmeans clustering
kmeans.os <- kmeans(obesity.select, centers = 4, nstart = 20)
#plot results of final k-means model
fviz_cluster(kmeans.os, data = obesity.scaled)
#perform kmeans clustering
kmeans.os <- kmeans(obesity.scaled, centers = 4, nstart = 20)
#plot results of final k-means model
fviz_cluster(kmeans.os, data = obesity.scaled)
